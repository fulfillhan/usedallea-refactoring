<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.application.usedallea.member.dao.MemberDAO">

	<insert id="registerMember" parameterType="MemberDTO" >
		INSERT INTO USER(
			USER_ID,
			PASSWORD,
			NICKNAME,
			NAME,
			PHONE_NUMBER,
			SMSSTS_YN,
			EMAIL,
			EMAILSTS_YN,
			ZIP_CODE,
			ROAD_ADDRESS,
			JIBUN_ADDRESS,
			NAMUJI_ADDRESS,
			PERSONALINFO_YN
		)
		VALUES(
			#{userId},
			#{password},
			#{nickname},
			#{name},
			#{phoneNumber},
			#{smsstsYn},
			#{email},
			#{emailstsYn},
			#{zipCode},
			#{roadAddress},
			#{jibunAddress},
			#{namujiAddress},
			#{personalInfoYn}
		)
	</insert>

	<select id="dupleCheckId" parameterType="String" resultType="String">
		SELECT
				USER_ID
		FROM
				USER
		WHERE
				USER_ID = #{userId}
	</select>

	<select id="getLoginData" parameterType="String" resultType="MemberDTO">
		SELECT
				PASSWORD,
				ACTIVE_YN
		FROM
				USER
		WHERE
				USER_ID = #{userId}
	</select>

	<select id="getMemberDetail" parameterType="String" resultType="MemberDTO">
		SELECT
		    	USER_ID,
		    	NICKNAME,
		    	NAME,
				PHONE_NUMBER,
				SMSSTS_YN,
				EMAIL,
				EMAILSTS_YN,
				ZIP_CODE,
				ROAD_ADDRESS,
				JIBUN_ADDRESS,
				NAMUJI_ADDRESS
		FROM
		    	USER
		WHERE
		    	USER_ID = #{userId}
	</select>

	<update id="updateMember" parameterType="MemberDTO">
		UPDATE
		    	USER
		SET
		    	NICKNAME = #{nickname},
				PHONE_NUMBER = #{phoneNumber},
				SMSSTS_YN = #{smsstsYn},
				EMAIL = #{email},
				EMAILSTS_YN = #{emailstsYn},
				ZIP_CODE = #{zipCode},
				ROAD_ADDRESS = #{roadAddress},
				JIBUN_ADDRESS = #{jibunAddress},
				NAMUJI_ADDRESS = #{namujiAddress}
	</update>

	<update id="updateDeleteMember" parameterType="String">
		UPDATE
		    	USER
		SET
		    	ACTIVE_YN = "n",
				UPDATED_AT = NOW()
		WHERE
		    	USER_ID = #{userId}
	</update>

	<select id="getAllUserCnt" resultType="int">
		SELECT
		    	COUNT(*)
		FROM
		    	USER
	</select>

	<select id="getMemberList" parameterType="hashMap" resultType="MemberDTO">
		SELECT
		    	USER_ID,
		    	NAME,
		    	NICKNAME,
		    	EMAIL,
				PHONE_NUMBER,
				CREATED_AT,
				UPDATED_AT,
				ACTIVE_YN
		FROM
		    	USER
		ORDER BY
		     CREATED_AT ASC
		LIMIT
				#{startViewIdx},#{onePageViewCnt}

	</select>

	<delete id="removeUser" parameterType="String">
		DELETE FROM
		           	USER
		WHERE
		    	USER_ID = #{userId}

	</delete>


</mapper>
